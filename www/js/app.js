// Generated by CoffeeScript 1.3.3
(function() {
  var AppRouter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.directory = {
    models: {},
    views: {},
    utils: {},
    dao: {}
  };

  Backbone.View.prototype.close = function() {
    if (this.beforeClose) {
      this.beforeClose();
    }
    if (this.iscoll) {
      console.log('destroying iscroll');
      this.iscroll.destroy();
      this.iscoll = null;
    }
    console.log("View undelegateEvents");
    return this.undelegateEvents();
  };

  directory.Router = AppRouter = (function(_super) {

    __extends(AppRouter, _super);

    function AppRouter() {
      return AppRouter.__super__.constructor.apply(this, arguments);
    }

    AppRouter.prototype.routes = {
      "": "home",
      "list": "list",
      "calendar": "calendar",
      "contact/:id": "contactDetails",
      "contact/:id/groups": "groups",
      "feed": "feed",
      "feed/:network": "feed",
      "sync": "synchronize"
    };

    AppRouter.prototype.initialize = function() {
      var _this = this;
      _.bindAll(this);
      this.pageHistory = [];
      $('#content').on('click', '.header-back-button', function(event) {
        window.history.back();
        return false;
      });
      if (document.documentElement.hasOwnProperty('ontouchstart')) {
        document.addEventListener('touchmove', function(e) {
          e.preventDefault();
          return false;
        });
        $('#content').on('touchstart', 'a', function(event) {
          return _this.selectItem(event);
        });
        $('#content').on('touchend', 'a', function(event) {
          return _this.deselectItem(event);
        });
      } else {
        $('#content').on('mousedown', 'a', function(event) {
          return _this.selectItem(event);
        });
        $('#content').on('mouseup', 'a', function(event) {
          return _this.deselectItem(event);
        });
      }
      this.homePage = new directory.views.HomePage();
      return this.homePage.render();
    };

    AppRouter.prototype.selectItem = function(event) {
      return $(event.target).addClass('tappable-active');
    };

    AppRouter.prototype.deselectItem = function(event) {
      return $(event.target).removeClass('tappable-active');
    };

    AppRouter.prototype.home = function() {
      console.log('home');
      return this.slidePage(this.homePage);
    };

    AppRouter.prototype.list = function() {
      console.log('search');
      this.searchResults = new directory.models.ContactCollection();
      this.searchPage = new directory.views.SearchPage({
        model: this.searchResults
      });
      $(this.searchPage.el).attr('id', 'searchPage');
      return this.slidePage(this.searchPage);
    };

    AppRouter.prototype.calendar = function() {
      return this.slidePage(new directory.views.CalendarPage().render());
    };

    AppRouter.prototype.contactDetails = function(id) {
      var contact,
        _this = this;
      contact = new directory.models.Contact({
        id: id
      });
      return contact.fetch({
        success: function(data) {
          return _this.slidePage(new directory.views.ContactPage({
            model: data
          }).render());
        }
      });
    };

    AppRouter.prototype.groups = function(id) {
      var contact;
      contact = directory.models.Contact({
        id: id
      });
      contact.groups.fetch();
      return this.slidePage(new directory.views.GroupsPage({
        model: contact.groups
      }).render());
    };

    AppRouter.prototype.feed = function(network) {
      var page;
      if (!network) {
        page = new directory.views.FeedsPage().render();
        console.log('page rendered', page);
        return this.slidePage(page);
      } else {
        page = new directory.views.FeedsPage().render();
        console.log('page rendered', page);
        return this.slidePage(page);
      }
    };

    AppRouter.prototype.synchronize = function() {
      this.searchResults.reset();
      return this.slidePage(new directory.views.SyncPage().render());
    };

    AppRouter.prototype.slidePage = function(page) {
      var slideFrom,
        _this = this;
      if (!this.currentPage) {
        $(page.el).attr('class', 'page stage-center');
        $('#content').append(page.el);
        this.pageHistory = [window.location.hash];
        this.currentPage = page;
        return;
      }
      if (this.currentPage !== this.searchPage) {
        this.currentPage.close();
      }
      $('.stage-right, .stage-left').not('#searchPage').remove();
      if (page === this.searchPage) {
        slideFrom = 'left';
        $(page.el).attr('class', 'page stage-left');
        this.pageHistory = [window.location.hash];
      } else if (this.pageHistory.length > 1 && window.location.hash === this.pageHistory[this.pageHistory.length - 2]) {
        slideFrom = 'left';
        $(page.el).attr('class', 'page stage-left');
        this.pageHistory.pop();
      } else {
        slideFrom = 'right';
        $(page.el).attr('class', 'page stage-right');
        this.pageHistory.push(window.location.hash);
      }
      $('#content').append(page.el);
      return setTimeout(function() {
        var _ref;
        $(_this.currentPage.el).attr('class', 'page transition ' + ((_ref = slideFrom === 'right') != null ? _ref : {
          'stage-left': 'stage-right'
        }));
        $(page.el).attr('class', 'page stage-center transition');
        return _this.currentPage = page;
      });
    };

    return AppRouter;

  })(Backbone.Router);

  $(document).ready(function() {
    var employeeDAO;
    directory.db = window.openDatabase("EmployeeDB", '1.0', 'Employee Demo DB', 200000);
    employeeDAO = new directory.dao.EmployeeDAO(directory.db);
    return employeeDAO.initialize(function() {
      return directory.utils.templateLoader.load(['search-page', 'group-page', 'contact-page', 'contact-list-item', 'sync-page', 'feed-page', 'tweet-template', 'home-page', 'calendar-list', 'calendar-page', 'facebook-template', 'event-template'], function() {
        directory.app = new directory.Router();
        return Backbone.history.start();
      });
    });
  });

}).call(this);
