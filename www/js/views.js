// Generated by CoffeeScript 1.3.3
(function() {
  var CalendarPage, ContactListItemView, ContactListView, ContactPage, FeedsPage, GroupPage, HomePage, SearchPage, SyncPage,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  directory.views.HomePage = HomePage = (function(_super) {

    __extends(HomePage, _super);

    function HomePage() {
      return HomePage.__super__.constructor.apply(this, arguments);
    }

    HomePage.prototype.initialize = function() {
      _.bindAll(this);
      return this.template = _.template(directory.utils.templateLoader.get('home-page'));
    };

    HomePage.prototype.render = function() {
      return $(this.el).html(this.template());
    };

    return HomePage;

  })(Backbone.View);

  directory.views.SearchPage = SearchPage = (function(_super) {

    __extends(SearchPage, _super);

    function SearchPage() {
      return SearchPage.__super__.constructor.apply(this, arguments);
    }

    SearchPage.prototype.templateLoader = directory.utils.templateLoader;

    SearchPage.prototype.events = {
      'keyup .search-key': 'search',
      'click a': 'onClick'
    };

    SearchPage.prototype.initialize = function() {
      _.bindAll(this);
      console.log('SearchPage initialize');
      this.template = _.template(this.templateLoader.get('search-page'));
      return this.render();
    };

    SearchPage.prototype.render = function(eventName) {
      var params;
      console.log('SearchPage render');
      $(this.el).html(this.template(this.model.toJSON()));
      params = {
        el: $('.scroll', this.el),
        model: this.model
      };
      this.listView = new directory.views.ContactListView(params);
      this.listView.render();
      return this;
    };

    SearchPage.prototype.search = function(event) {
      var key;
      console.log('search');
      key = $('.search-key').val();
      console.log('key', key);
      this.model.findByName(key);
      return false;
    };

    SearchPage.prototype.onClick = function(event) {
      return $('.search-key').blur();
    };

    return SearchPage;

  })(Backbone.View);

  directory.views.GroupPage = GroupPage = (function(_super) {

    __extends(GroupPage, _super);

    function GroupPage() {
      return GroupPage.__super__.constructor.apply(this, arguments);
    }

    GroupPage.prototype.initialize = function() {
      _.bindAll(this);
      return this.template = _.template(directory.utils.templateLoader.get('group-page'));
    };

    GroupPage.prototype.render = function(eventName) {
      var params;
      console.log('GroupPage render');
      $(this.el).html(this.template(this.model.toJSON()));
      params = {
        el: $('.scroll', this.el),
        model: this.model
      };
      this.listView = new directory.views.ContactListView(params);
      this.listView.render();
      return this;
    };

    return GroupPage;

  })(Backbone.View);

  directory.views.CalendarPage = CalendarPage = (function(_super) {

    __extends(CalendarPage, _super);

    function CalendarPage() {
      return CalendarPage.__super__.constructor.apply(this, arguments);
    }

    CalendarPage.prototype.events = {
      "click .test": "showEvents",
      "click .create": "create"
    };

    CalendarPage.prototype.initialize = function() {
      _.bindAll(this);
      this.template = _.template(directory.utils.templateLoader.get('calendar-page'));
      this.calendarListTemplate = _.template(directory.utils.templateLoader.get('calendar-list'));
      return this.eventTemplate = _.template(directory.utils.templateLoader.get('event-template'));
    };

    CalendarPage.prototype.render = function() {
      var _this = this;
      console.log('calendar page');
      $(this.el).html(this.template());
      window.plugins.calendarPlugin.getCalendarList(function(response) {
        var calendar, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = response.length; _i < _len; _i++) {
          calendar = response[_i];
          _results.push((function(calendar) {
            return $('.calendars').append(_this.calendarListTemplate({
              'name': calendar
            }));
          })(calendar));
        }
        return _results;
      }, function(response) {
        return console.log('error', response);
      });
      return this;
    };

    CalendarPage.prototype.create = function(e) {
      var data;
      console.log("create", e.target);
      data = $(e.target).data();
      console.log("data", data);
      return window.plugins.calendarPlugin.createEvent(function(res) {
        return alert(res);
      });
    };

    CalendarPage.prototype.showEvents = function(e) {
      var _this = this;
      console.log("show events");
      window.plugins.calendarPlugin.getEventList(function(res) {
        console.log("result", res);
        $('ul').empty();
        $('.calendars').hide();
        return $('ul').append(_this.eventTemplate(res[0]));
      }, function(res) {
        console.log("error result", res);
        $('ul').empty();
        $('.calendars').hide();
        return $('ul').append('<li class="create">Create and Event</li>');
      });
      return e.preventDefault();
    };

    return CalendarPage;

  })(Backbone.View);

  directory.views.ContactListView = ContactListView = (function(_super) {

    __extends(ContactListView, _super);

    function ContactListView() {
      return ContactListView.__super__.constructor.apply(this, arguments);
    }

    ContactListView.prototype.initialize = function() {
      _.bindAll(this);
      return this.model.on('reset', this.render, this);
    };

    ContactListView.prototype.render = function(eventName) {
      var ul;
      ul = $('ul', this.el);
      ul.empty();
      _.each(this.model.models, function(contact) {
        return ul.append(new directory.views.ContactListItemView({
          model: contact
        }).render().el);
      }, this);
      if (this.iscroll) {
        console.log('Refresh iScroll');
        this.iscroll.refresh();
      } else {
        console.log('New iScroll');
        this.iscroll = new iScroll(this.el, {
          hScrollbar: false,
          vScrollbar: false
        });
      }
      return this;
    };

    return ContactListView;

  })(Backbone.View);

  directory.views.ContactListItemView = ContactListItemView = (function(_super) {

    __extends(ContactListItemView, _super);

    function ContactListItemView() {
      return ContactListItemView.__super__.constructor.apply(this, arguments);
    }

    ContactListItemView.prototype.tagName = 'li';

    ContactListItemView.prototype.initialize = function() {
      _.bindAll(this);
      return this.template = _.template(directory.utils.templateLoader.get('contact-list-item'));
    };

    ContactListItemView.prototype.render = function(eventName) {
      var _this = this;
      $(this.el).html(this.template(this.model.toJSON()));
      $('<img height="50" width="50" class="list-icon"/>').attr('src', this.model.get('picture')).load(function() {
        return $('.imgHolder', _this.el).html(_this);
      }).on('error', function(event) {
        return $(this).attr('src', 'img/unknown.jpg');
      });
      return this;
    };

    return ContactListItemView;

  })(Backbone.View);

  directory.views.ContactPage = ContactPage = (function(_super) {

    __extends(ContactPage, _super);

    function ContactPage() {
      return ContactPage.__super__.constructor.apply(this, arguments);
    }

    ContactPage.prototype.initialize = function() {
      _.bindAll(this);
      return this.template = _.template(directory.utils.templateLoader.get('contact-page'));
    };

    ContactPage.prototype.render = function(eventName) {
      var _this = this;
      $(this.el).html(this.template(this.model.toJSON()));
      $('<img height="85" width="85"/>').attr('src', this.model.get('picture')).load(function() {
        return $('.imgHolder', _this.el).prepend(_this);
      }).on('error', function(envent) {
        return $(this).attr('src', 'img/unknown.jpg');
      });
      setTimeout(function() {
        _this.iscroll = new iScroll($('.scroll', _this.el)[0], {
          hScrollbar: false,
          vScrollbar: false
        });
        return _this.iscroll.refresh();
      }, 100);
      return this;
    };

    ContactPage.prototype.addContact = function() {
      var contact, contactName;
      contact = new Contact();
      contactName = new ContactName();
      contactName.givenName = this.model.get('firstName');
      contactName.familyname = this.model.get('lastName');
      contact.name = contactName;
      contact.phoneNumbers = [new ContactField('work', this.model.get('officePhone'), false), new ContactField('mobile', this.model.get('cellPhone'), true)];
      contact.emails = [new ContactField('work', this.model.get('email'), true)];
      contact.save();
      showAlert(this.model.get('firstName') + ' ' + this.model.get('lastName') + ' added as Contact', 'Successs');
      return false;
    };

    return ContactPage;

  })(Backbone.View);

  directory.views.FeedsPage = FeedsPage = (function(_super) {

    __extends(FeedsPage, _super);

    function FeedsPage() {
      return FeedsPage.__super__.constructor.apply(this, arguments);
    }

    FeedsPage.prototype.events = {
      'click .twitter': 'twitter',
      'click .facebook': 'facebook'
    };

    FeedsPage.prototype.initialize = function() {
      console.log('feeds page initialized');
      _.bindAll(this);
      this.storage = window.localStorage;
      this.template = _.template(directory.utils.templateLoader.get('feed-page'));
      this.tweetTemplate = _.template(directory.utils.templateLoader.get('tweet-template'));
      return this.facebookTemplate = _.template(directory.utils.templateLoader.get('facebook-template'));
    };

    FeedsPage.prototype.render = function(eventName) {
      var _this = this;
      console.log('rendering started');
      $(this.el).html(this.template());
      setTimeout(function() {
        _this.iscroll = new iScroll($('.scroll', _this.el)[0], {
          hScrollbar: false,
          vScrollbar: false
        });
        return _this.iscroll.refresh();
      }, 100);
      return this;
    };

    FeedsPage.prototype.facebook = function(e) {
      var _this = this;
      FB.getLoginStatus(function(res) {
        console.log("checking status", res);
        if (res.status !== 'connected') {
          return FB.login(null, {
            scope: 'email, read_stream'
          }, function(loginRes) {
            return console.log("logged in", loginRes);
          }, function(loginRes) {
            return console.log("login failed", loginRes);
          });
        }
      }, function(res) {
        return console.log("failed");
      });
      FB.api('/me/home', {
        fields: ''
      }, function(response) {
        var news;
        news = response.data;
        console.log('fetched news', response, news);
        return _this.facebookSuccess(news);
      });
      return e.preventDefault();
    };

    FeedsPage.prototype.facebookSuccess = function(news) {
      var update, _fn, _i, _len,
        _this = this;
      console.log('facebook success', news);
      $('.networks').hide();
      $('ul').empty();
      _fn = function(update) {
        return $('ul').append(_this.facebookTemplate({
          name: update.from.name,
          message: update.message
        }));
      };
      for (_i = 0, _len = news.length; _i < _len; _i++) {
        update = news[_i];
        _fn(update);
      }
      return setTimeout(function() {
        console.log('refresh');
        return _this.iscroll.refresh();
      }, 100);
    };

    FeedsPage.prototype.twitter = function(e) {
      var _this = this;
      this.tweets = this.storage.getItem('julian');
      if (this.tweets) {
        this.twitterSuccess(this.tweets);
      } else {
        window.plugins.twitter.getTWRequest('statuses/home_timeline.json', {}, function(s) {
          return _this.twitterSuccess(s);
        }, function(e) {
          return _this.twitterFailure(e);
        });
      }
      return e.preventDefault();
    };

    FeedsPage.prototype.twitterSuccess = function(response) {
      var tweet, user, _fn, _i, _len,
        _this = this;
      user = 'julian';
      if (!this.tweets) {
        this.storage.setItem(user, JSON.stringify(response));
      } else {
        response = JSON.parse(response);
      }
      console.log('tweets');
      console.log('success');
      $('.networks').hide();
      $('ul').empty();
      console.log('hide networks');
      _fn = function(tweet) {
        return $('ul').append(_this.tweetTemplate(tweet));
      };
      for (_i = 0, _len = response.length; _i < _len; _i++) {
        tweet = response[_i];
        _fn(tweet);
      }
      $('#log').html(JSON.stringify(response, null, ' '));
      return setTimeout(function() {
        console.log('refresh');
        return _this.iscroll.refresh();
      }, 100);
    };

    FeedsPage.prototype.twitterFailure = function(response) {
      return $('#log').html(JSON.stringify(response));
    };

    return FeedsPage;

  })(Backbone.View);

  directory.views.SyncPage = SyncPage = (function(_super) {

    __extends(SyncPage, _super);

    function SyncPage() {
      return SyncPage.__super__.constructor.apply(this, arguments);
    }

    SyncPage.prototype.events = {
      'click .sync': 'sync',
      'click .reset': 'reset'
    };

    SyncPage.prototype.initialize = function() {
      _.bindAll(this);
      return this.template = _.template(directory.utils.templateLoader.get('sync-page'));
    };

    SyncPage.prototype.render = function(eventName) {
      var syncUrl;
      $(this.el).html(this.template());
      syncUrl = window.localStorage.getItem('syncUrl');
      if (!syncUrl) {
        syncUrl = 'http://employeedirectory.org/api/employees';
      }
      $('#syncUrl', this.el).val(syncUrl);
      return this;
    };

    SyncPage.prototype.sync = function() {
      var dao;
      window.localStorage.setItem('syncUrl', $('#syncUrl').val());
      dao = new directory.dao.EmployeeDAO(directory.db);
      $('#hourglass').show();
      dao.sync(function(numItems) {
        $('#hourglass').hide();
        showAlert(numItems + ' items synchronized', 'complete');
        return directory.app.searchResults.reset();
      }, function(errorMessage) {
        $('#hourglass').hide();
        return showAlert(errorMessage, "Error");
      });
      return false;
    };

    SyncPage.prototype.reset = function() {
      var dao;
      dao = new directory.dao.EmployeeDAO(directory.db);
      dao.reset(function() {
        showAlert('The local database has been reset', 'Reset');
        return directory.app.searchResults.reset();
      });
      return false;
    };

    return SyncPage;

  })(Backbone.View);

}).call(this);
